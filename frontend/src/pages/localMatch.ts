import { state } from "../state";
import { navigateTo } from "../router";
import { loginWithoutSession } from "../services/auth"; // ‚úÖ Connexion temporaire du Joueur 2
import { getUsers } from "../services/userService";
import { translateText } from "../translate";

export default async function LocalMatch(): Promise<HTMLElement> {
     /*          TRANSLATE TAB       */
     const textToTranslate = [
        "Match Local 1v1",
        "Se connecter",
        "Match √† dur√©e limit√©e",
        "Match en nombre de points",
        "min",
        "points",
        "Commencer la partie",
        "Veuillez entrer le mot de passe du Joueur 2.",
        "Connexion r√©ussie pour",
        "√âchec de l'authentification. V√©rifiez le mot de passe.",
        "Mot de passe du Joueur 2"
    ];
    const [
        translatedMatch1v1,
        translatedConnexion,
        translatedMatchTime,
        translatedMatchPoint,
        translatedMin,
        translatedPoint,
        translatedStartGame,
        translatedAlertEnterPwd,
        translatedAlertSuccess,
        translatedAlertFailed,
        translatedPHpwdPlayer

    ] = await Promise.all(textToTranslate.map(text => translateText(text)));

    if (!state.user) {
        navigateTo(new Event("click"), "/login");
        return document.createElement("div");
    }

    console.log("üîç Chargement des utilisateurs...");
    const users = await getUsers();
    console.log("‚úÖ Utilisateurs r√©cup√©r√©s :", users);

    const container: HTMLDivElement = document.createElement("div");
    container.className = "flex flex-col items-center min-h-screen bg-gradient-to-b from-black via-gray-900 to-black text-white p-8 space-y-6";

    const title: HTMLHeadingElement = document.createElement("h1");
    title.innerHTML = "üåå " + translatedMatch1v1;
    title.className = "text-4xl font-bold text-purple-400 animate-pulse";

    // ‚úÖ S√©lection du Joueur 2 (liste d√©roulante)
    const player2Select: HTMLSelectElement = document.createElement("select");
    player2Select.className = "mt-4 px-4 py-2 rounded-lg text-black text-center shadow-md border-2 border-purple-500 bg-white w-64";

    users.forEach(user => {
        if (user.username !== state.user.username) {
            const option: HTMLOptionElement = document.createElement("option");
            option.value = user.username;
            option.innerHTML = user.username;
            player2Select.appendChild(option);
        }
    });

    // ‚úÖ Champ de mot de passe pour le Joueur 2
    const player2Password: HTMLInputElement = document.createElement("input");
    player2Password.type = "password";
    player2Password.placeholder = translatedPHpwdPlayer;
    player2Password.className = "mt-2 px-4 py-2 rounded-lg text-black text-center shadow-md border-2 border-gray-400 w-64 hidden";

    // ‚úÖ Bouton pour valider la connexion du Joueur 2
    const connectButton: HTMLButtonElement = document.createElement("button");
    connectButton.innerHTML = "üîë " + translatedConnexion;
    connectButton.className = "mt-4 px-6 py-2 bg-blue-600 hover:bg-blue-500 text-white rounded-lg shadow-lg transition-all transform hover:scale-105 hidden";

    // ‚úÖ Section des param√®tres du match (cach√©e au d√©part)
    const matchSettingsContainer: HTMLDivElement = document.createElement("div");
    matchSettingsContainer.className = "mt-6 space-y-4 hidden"; // Cach√© tant que le Joueur 2 n'est pas connect√©

    // ‚úÖ S√©lection du mode de jeu
    const modeSelect: HTMLSelectElement = document.createElement("select");
    modeSelect.className = "px-4 py-2 rounded-lg text-black text-center shadow-md border-2 border-blue-400 bg-white w-64";

    const optionTime: HTMLOptionElement = document.createElement("option");
    optionTime.value = "time";
    optionTime.innerHTML = "‚è≥ " + translatedMatchTime;

    const optionPoints: HTMLOptionElement = document.createElement("option");
    optionPoints.value = "points";
    optionPoints.innerHTML = "üèÜ " + translatedMatchPoint;

    modeSelect.append(optionTime, optionPoints);

    // ‚úÖ Options de dur√©e
    const timeOptions: HTMLSelectElement = document.createElement("select");
    timeOptions.className = "mt-2 px-4 py-2 rounded-lg text-black shadow-md border-2 border-yellow-400 bg-white w-64 hidden";

    [120, 300, 600].forEach(time => {
        const option: HTMLOptionElement = document.createElement("option");
        option.value = String(time);
        option.innerHTML = `‚è≥ ${time / 60} ${translatedMin}`;
        timeOptions.appendChild(option);
    });

    // ‚úÖ Options de points
    const pointsOptions: HTMLSelectElement = document.createElement("select");
    pointsOptions.className = "mt-2 px-4 py-2 rounded-lg text-black shadow-md border-2 border-red-400 bg-white w-64 hidden";

    [5, 10, 15].forEach(points => {
        const option: HTMLOptionElement = document.createElement("option");
        option.value = String(points);
        option.innerHTML = `üéØ ${points} ${translatedPoint}`;
        pointsOptions.appendChild(option);
    });

    // ‚úÖ Bouton pour commencer la partie (cach√© par d√©faut)
    const startGameButton: HTMLButtonElement = document.createElement("button");
    startGameButton.innerHTML = "üöÄ " + translatedStartGame;
    startGameButton.className = "mt-6 px-6 py-2 bg-green-600 hover:bg-green-500 text-white rounded-lg shadow-lg transition-all transform hover:scale-105 hidden";

    // ‚úÖ Affichage dynamique des options de match
    function updateMatchOptions() {
        if (modeSelect.value === "time") {
            timeOptions.style.display = "block";
            pointsOptions.style.display = "none";
        } else {
            timeOptions.style.display = "none";
            pointsOptions.style.display = "block";
        }
    }
    modeSelect.addEventListener("change", updateMatchOptions);
    updateMatchOptions();

    // ‚úÖ Affichage du mot de passe et du bouton apr√®s la s√©lection d‚Äôun joueur
    function showLoginFields() {
        console.log(`üéØ Joueur 2 s√©lectionn√© : ${player2Select.value}`);
        player2Password.classList.remove("hidden");
        connectButton.classList.remove("hidden");
    }

    player2Select.addEventListener("change", showLoginFields);
    if (player2Select.value) {
        showLoginFields();
    }

    // ‚úÖ Connexion temporaire du Joueur 2
    connectButton.onclick = async () => {
        const player2Username: string = player2Select.value;
        const password: string = player2Password.value.trim();

        if (!password) {
            alert( translatedAlertEnterPwd);
            return;
        }

        console.log(`üîë Tentative de connexion temporaire pour ${player2Username}...`);

        try {
            const player2Auth = await loginWithoutSession(player2Username, password);
            console.log(`‚úÖ Connexion r√©ussie pour ${player2Username}`, player2Auth);
            alert(`‚úÖ ${translatedAlertSuccess} ${player2Username}`);

            // ‚úÖ Stocker les infos du Joueur 2 sans √©craser `state.user`
            if (!state.localMatch) {
				state.localMatch = {
					player1: state.user.username,
					player2: "",
					player2Auth: null,
					mode: "points",
					target: 10
				};
			}
			state.localMatch.player2Auth = player2Auth;
			

            // ‚úÖ Cacher les champs apr√®s connexion
            connectButton.classList.add("hidden");
            player2Password.classList.add("hidden");

            // ‚úÖ Afficher les param√®tres du match et le bouton de d√©marrage
            matchSettingsContainer.classList.remove("hidden");
            startGameButton.classList.remove("hidden");

        } catch (error) {
            console.error("‚ùå √âchec de l'authentification :", error);
            alert("‚ùå " + translatedAlertFailed);
        }
    };

    // ‚úÖ D√©marrer le match
    startGameButton.onclick = () => {
		if (!state.localMatch) {
			console.error("‚ùå Erreur : `state.localMatch` est null !");
			return;
		}
	
		state.localMatch.player1 = state.user.username;
		state.localMatch.player2 = player2Select.value;
		state.localMatch.mode = modeSelect.value as "time" | "points";
		state.localMatch.target = modeSelect.value === "time" ? parseInt(timeOptions.value) : parseInt(pointsOptions.value);
	
		navigateTo(new Event("click"), "/game-local");
	};
	

    // ‚úÖ Ajout des param√®tres de match au container apr√®s connexion
    matchSettingsContainer.append(modeSelect, timeOptions, pointsOptions, startGameButton);

    // ‚úÖ Ajout des √©l√©ments au container
    container.append(title, player2Select, player2Password, connectButton, matchSettingsContainer);
    return container;
}
